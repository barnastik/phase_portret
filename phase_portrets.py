# -*- coding: utf-8 -*-
"""phase_portrets.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cT9B7OpSIY4jxqjQUZyoKc5xyh4QVJ5t
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint


def func(v, t):
    x, y = v
    return [y, -x + y * (1 - 3 * x ** 2 - 2 * y ** 2)]


y0_list = [
    ([-0.02, 0.02], 'blue'),
    ([0.006, -0.006], 'orange'),
    ([-0.0001, -0.0001], 'purple'),
    ([0.4, 0.4], 'green'),
    ([0.9, 0.9], 'red'),
]

t = np.linspace(0, 25, 1000)

plt.figure(figsize=(8, 6))

arrow_length = 0.03

for y0, color in y0_list:
    sol = odeint(func, y0, t)
    x = sol[:, 0]
    y = sol[:, 1]

    plt.plot(x, y, lw=0.5, label=f'y0 = {y0}', color=color)

    dt = t[1] - t[0]
    dx = np.gradient(x, dt) * arrow_length
    dy = np.gradient(y, dt) * arrow_length

    num_points = len(x)
    arrow_spacing = 300
    arrow_indices = np.arange(0, num_points, arrow_spacing)

    for idx in arrow_indices:
        plt.arrow(x[idx], y[idx], dx[idx], dy[idx], head_width=0.02, head_length=0.02, color=color, alpha=0.8)

plt.plot(0, 0, marker="o", color="red", label="Equilibrium Point")

plt.title("Phase portrait")
plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend(loc='lower right')
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

def func(v, t):
    x, y = v
    return [y, -x + y * (1 - 3 * x ** 2 - 2 * y ** 2)]

y0_list = [
    ([-0.02, 0.02], 'blue'),
    ([0.006, -0.006], 'orange'),
    ([-0.0001, -0.0001], 'purple'),
    ([0.4, 0.4], 'green'),
    ([0.9, 0.9], 'red'),
]

t = np.linspace(0, 25, 1000)

plt.figure(figsize=(8, 6))

arrow_length = 0.03

for y0, color in y0_list:
    sol = odeint(func, y0, t)
    x = sol[:, 0]
    y = sol[:, 1]

    plt.plot(x, y, lw=0.5, label=f'y0 = {y0}', color=color)

    dt = t[1] - t[0]
    dx = np.gradient(x, dt) * arrow_length
    dy = np.gradient(y, dt) * arrow_length

    num_points = len(x)
    arrow_spacing = 300
    arrow_indices = np.arange(0, num_points, arrow_spacing)

    for idx in arrow_indices:
        plt.arrow(x[idx], y[idx], dx[idx], dy[idx], head_width=0.02, head_length=0.02, color=color, alpha=0.8)

plt.plot(0, 0, marker="o", color="red", label="Equilibrium Point")

plt.title("Phase portrait")
plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend(loc='lower right')

output_filename = "phase_portrait.pdf"
plt.savefig(output_filename, format='pdf')

plt.show()

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import math


def system(yx, t):
    dydt = 2 * yx[0] - yx[0] * yx[1]
    dxdt = 2 * yx[0] ** 2 - yx[1]
    return [dydt, dxdt]


def arrows(N, x_values, y_values, a, b, c, d):
    str = np.zeros((N, 2))
    for i in range(0, N):
        str[i][0] = x_values[i]
        str[i][1] = y_values[i]
    for i in range(a, N - b, c):
        plt.quiver(
            str[i][0],
            str[i][1],
            str[i + d][0] - str[i][0],
            str[i + d][1] - str[i][1],
            scale_units="xy",
            angles="xy",
            scale=1,
            color="black",
            alpha=1,
            width=0.02,
        )


N = 1000
t = np.linspace(0, 40, N)

yx0 = [-0.03, 4]
sol1 = odeint(system, yx0, t)
yx0 = [0.03, 4]
sol2 = odeint(system, yx0, t)
yx0 = [-0.01, -4]
sol3 = odeint(system, yx0, t)
yx0 = [0.01, -4]
sol4 = odeint(system, yx0, t)
y = list()
x = list()
y1 = list()
x1 = list()
t_1 = t = np.linspace(-1.4, 40, N)
for i in range(N):
    y.append(math.exp(-t_1[i]))
    x.append(0)
for i in range(N):
    y1.append(-1 * math.exp(-t_1[i]))
    x1.append(0)
plt.figure(figsize=(6, 6))
plt.grid()
plt.plot(x, y, color="black")
plt.plot(x1, y1, color="black")
arrows(N, x, y, 50, 940, 15, 14)
arrows(N, x1, y1, 50, 940, 15, 14)
plt.plot(sol1[:, 0], sol1[:, 1], color="black")
arrows(N, sol1[:, 0], sol1[:, 1], 110, 880, 10, 3)
plt.plot(sol2[:, 0], sol2[:, 1], color="black")
arrows(N, sol2[:, 0], sol2[:, 1], 110, 880, 10, 3)
plt.plot(sol3[:, 0], sol3[:, 1], color="black")
arrows(N, sol3[:, 0], sol3[:, 1], 25, 970, 10, 2)
plt.plot(sol4[:, 0], sol4[:, 1], color="black")
arrows(N, sol4[:, 0], sol4[:, 1], 25, 970, 10, 2)
plt.plot(0, 0, marker="o", color="red")
plt.arrow(0, 0, -0.45, 0, color="black", head_width=0.055)
plt.arrow(0, 0, 0.45, 0, color="black", head_width=0.055)
plt.plot(1, 2, marker="o", color="green")
plt.plot(-1, 2, marker="o", color="green")
plt.xlabel("x")
plt.ylabel("y")
plt.show()